#JWT
  JWT란?
    JWT(Json Web Token)은 사용자 인증 및 정보 교환을 위해 설계된 JSON 기반의 경량 토큰으로, 로그인 등 인증 정보를 안전하게 주고받을 때 사용한다.
  JWT의 구조는?
    크게 헤더(Header), 페이로드(Payload), 서명(Signature)으로 구성되며 각 부분은 .(점)으로 연결된다.
    헤더는 토큰의 유형과 서명 알고리즘 정보를 포함하고 페이로드는 사용자 정보 등 실제 전달할 데이터를 JSON 형식으로 표현하여 담는다. 서명은 헤더와 페이로드를 결합한 뒤, 비밀키 등으로 암호화하여 토큰의 무결성과 진위를 보장한다.
  JWT를 활용하여 클라이언트와 서버 간의 인증 정보를 전달하고 따라서 jwt는 보안성과 편의성을 동시에 갖춘 점이 특징이다.

  1. 헤더(header)
    첫 번 째는 hmac, sha256 또는 rsa와 같은 서명 생성에 사용된 해시 알고리즘, 두 번 째는 토큰의 유형
  2. 페이로드(payload)
    payload에 담는 정보의 한 조각을 클레임이라고 부르며 name-value 한 쌍으로 이뤄짐
    토큰에는 여러 개의 클레임을 넣을 수 있으며 클레임의 정보는 등록된 클레임, 공개 클레임, 비공개 클레임으로 세 종류가 있음
    1) 등록된 클레임 : 토큰 정보를 표현하기 위해 이미 정해진 종류의 데이터들로, 모두 선택적으로 작성이 가능하며 사용할 것을 권장

    iss: 토큰 발급자(issuer)
    sub: 토큰 제목(subject)
    aud: 토큰 대상자(audience)
    exp: 토큰 만료 시간(expiration)
    nbf: 토큰 활성 날짜(not before)
    iat: 토큰 발급 시간(issued at)
    jti: JWT 토큰 식별자(JWT ID)

    2) 공개 클레임 : 사용자 정의 클레임으로, 공개용 정보를 위해 사용된다. 충돌 방지를 위해 URI 포맷을 이용
    3) 비공개 클레임 : 사용자 정의 클레임으로, 서버와 클라이언트 사이에 임의로 지정한 정보를 저장
  3. 서명(signature) 
    헤더와 페이로드 비밀키를 합쳐 암호화한 결과 값으로 HS256( base64UrlEncode(header) + "." + base64UrlEncode(payload), Secret key) 형태

  동작 방식
    사용자가 로그인을 시도하면 서버는 요청을 확인하고 secret key와 payload를 서명 알고리즘에 입력하여 서명을 만들고 이를 조립한 JWT을 발급한다.
    발급된 JWT 토큰을 클라이언트에 전달하면 클라이언트에서 API를 요청할때 클라이언트가 인증 헤더에 토큰을 담아서 보낸다.
    서버는 JWT Signature를 체크하고 Payload로부터 사용자 정보를 확인해 데이터를 반환한다.

 spring boot로 백엔드를 먼저 개발하며 security config와 jwt를 구현하고 회원가입, 로그인 api를 구현한다.
  후에 react 세팅하여 테스트하고 CORS도 설정해주어야 한다
 #CORS
   CORS(Cross-Origin Resource Sharing)

 #Access Token과 Refresh Token
   Access Token이란
     사용자의 인증과 권한을 나타내는 단기 유효 토큰으로 서버에 api 요청을 보낼 때 이 토큰을 헤더에 포함하여 요청을 보내고 액세스 토큰이 유효한지를 확인하여 사용자를 검증한다.
   @ access token 저장 위치

1. 로컬 스토리지
    
    클라이언트 측에 데이터를 영구적으로 저장하는 방법, 브라우저를 닫아도 데이터가 유지되며, 명시적으로 삭제하지 않는 한 계속 존재함
    
2. 세션 스토리지
    
    : 브라우저가 닫히면 데이터가 삭제되며, 같은 탭에서만 유효함
    
3. 쿠키
    
    : 모든 클라이언트 요청에 자동적으로 포함
    
4. 메모리
    
    : Access Token을 클라이언트 서버의 메모리에 저장하는 방식
