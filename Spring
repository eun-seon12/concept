#AOP, BEAN, DI 의존성 등 기본 개념

  -AOP(Aspect Oriented Programming)
    AOP는 객체지향 프로그래밍에서의 코드 중복을 제거하고 코드를 재사용하기 위한 프로그래밍 기법으로 기존의 코드를 변경하지 않고 새로운 기능을 추가하는 방식으로 사용한다.
    스프링에서는 AOP를 이용해 로깅, 트랜잭션, 보안 등의 기능을 제공한다.
  -DI(Dependency Injection)
    DI란 외부에서 두 객체 간의 관계를 결정해주는 디자인 패턴으로, 인터페이스를 사이에 둬서 클래스 레벨에서는 의존관계가 고정되지 않도록 하고 런타임 시에 관계를 동적으로 주입하여 유연성을 확보하고 결합도를 낮출 수 있게 해준다.
  -BEAN
    bean은 Spring IoC Container에서 관리되는 객체로 스프링은 Bean을 생성하고, 초기화하고, 의존성 주입하고, 제거하는 등의 일을 IoC Container를 통해 자동으로 처리할 수 있다.
#필터와 인터셉터

  -Filter
    filter는 말 그대로 요청과 응답을 걸러주는 역할을 한다. Dispatcher Servlet에 요청이 전달되기 전, 후에 url 패턴에 맞는 모든 요청에 대해 부가 작업을 처리할 수 있는 기능을 제공하여 스프링 컨테이너가 아닌 톰캣과 같은 웹 컨테이너에 의해 관리가 되는 것이고, 스프링 범위 밖에서 처리되는 것이다.
  -Interceptor
    spring에서 interceptor는 클라이언트의 요청을 가로채서 처리하는 역할을 한다. 이를 통해 공통적인 로직(로깅, 성능 측정, 캐싱)을 처리하거나, 보안(인증, 권한) 등의 목적으로 특정 조건을 검사하고 해당 요청을 처리하거나, 무시할 수 있다.
    Interceptor는 특정 요청 URL에만 적용되도록 매핑할 수 있다는 점이 필터와 유사하다. 하지만 필터와 달리 Interceptor 는 스프링 웹 애플리케이션 컨텍스트에 구성하기 때문에 컨테이너의 기능을 자유롭게 활용할 수 있으며 그 내부에 선언된 모든 빈을 참조할 수 있다. 
